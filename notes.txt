import {Observable} from 'rxjs/Observable';

Before:

    <p *ng-if="cond">
    <my-cmp [my-prop]="exp">
    <my-cmp (my-event)="action()">
    <my-cmp [(my-prop)]="prop">
    <input #my-input>
    <template ng-for #my-item [ng-for-of]=items #my-index="index">
After:

    <p *ngIf="cond">
    <my-cmp [myProp]="exp">
    <my-cmp (myEvent)="action()">
    <my-cmp [(myProp)]="prop">
    <input #myInput>`,
    <template ngFor="#myItem" [ngForOf]=items #myIndex="index">

    exported names have changed and now:

core is exported as ng.core
common is exported as ng.common
platform/browser is exported as ng.platform.browser
http is exported as ng.http
router is exported as ng.router
instrumentation is exported as ng.instrumentation
upgrade is exported as ng.upgrade
Form directives are exportedAs 'ngForm' (was 'form')

Before:

    <form #f="form">
After:

    <form #f="ngForm">

    End tags used to be tolerated for void elements with no content. They are no more allowed so that we more closely follow the HTML5 spec.

Operators and Observables from RxJS (e.g. .map(), .toArray(), .toPromise(), etc ) now need to be explicitly imported (once per operator in your app)

import {Observable} from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/observable/interval';

Observable.interval(1000).subscribe(...);

http.get('foos.json').map(res => res.json()).subscribe(...);

Previously, components that would implement lifecycle interfaces would include methods like "onChanges" or "afterViewInit." Given that components were at risk of using such names without realizing that Angular would call the methods at different points of the component lifecycle. This change adds an "ng" prefix to all lifecycle hook methods, far reducing the risk of an accidental name collision.

To fix, just rename these methods:

onInit
onDestroy
doCheck
onChanges
afterContentInit
afterContentChecked
afterViewInit
afterViewChecked
Router Hooks
onActivate
onReuse
onDeactivate
canReuse
canDeactivate
To:

ngOnInit,
ngOnDestroy,
ngDoCheck,
ngOnChanges,
ngAfterContentInit,
ngAfterContentChecked,
ngAfterViewInit,
ngAfterViewChecked
Router Hooks
routerOnActivate
routerOnReuse
routerOnDeactivate
routerCanReuse
routerCanDeactivate
The names of lifecycle interfaces and enums have not changed, though interfaces have been updated to reflect the new method names.

import {Component, EventEmitter} from 'angular2/core';
